// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fcp

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TaskManagerFullTaskInfo is an auto generated low-level Go binding around an user-defined struct.
type TaskManagerFullTaskInfo struct {
	TaskUid            string
	CpList             []common.Address
	User               common.Address
	Reward             *big.Int
	Collateral         *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
	CollateralStatus   uint8
}

// FcpTaskManagerMetaData contains all meta data concerning the FcpTaskManager contract.
var FcpTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"payday\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardReadyToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDuration\",\"type\":\"uint256\"}],\"name\":\"TaskExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"}],\"name\":\"TaskTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"URISubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpAccountList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"assignTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jobUid\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralContract\",\"outputs\":[{\"internalType\":\"contractCollateralV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"remainingCpList\",\"type\":\"address[]\"}],\"name\":\"completeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"extraDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"name\":\"extendTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cpList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"},{\"internalType\":\"enumCollateralV2.CollateralStatus\",\"name\":\"collateralStatus\",\"type\":\"uint8\"}],\"internalType\":\"structTaskManager.FullTaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"cpAccount\",\"type\":\"address\"}],\"name\":\"getTaskReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isSignatureUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollateralContract\",\"type\":\"address\"}],\"name\":\"setCollateralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enumTaskManager.TaskStatus\",\"name\":\"taskStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"taskUid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"terminateTime\",\"type\":\"uint256\"}],\"name\":\"terminateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5061005261005760201b60201c565b6101c1565b600061006761015b60201b60201c565b90508060000160089054906101000a900460ff16156100b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101585767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405161014f91906101a6565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b6101a081610183565b82525050565b60006020820190506101bb6000830184610197565b92915050565b6080516152cd6101ea600039600081816127fc015281816128510152612a0c01526152cd6000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063d038d1ea11610095578063eef74fc711610064578063eef74fc71461065d578063f2fde38b14610686578063f7c618c1146106af578063f8c8765e146106da576101c2565b8063d038d1ea146105a5578063e941cd06146105ce578063e9503425146105f7578063ed7bb9d114610634576101c2565b8063a718a952116100d1578063a718a952146104d5578063a947898814610512578063ad3cb1cc1461054f578063c6e1c7c91461057a576101c2565b8063715018a61461046a5780638da5cb5b146104815780639a8afe9c146104ac576101c2565b80634f1ef2861161016457806358709cf21161013e57806358709cf21461039657806369ab84f2146103d95780636e1e063f146104045780637048027514610441576101c2565b80634f1ef2861461032457806352d1902d1461034057806354fd4d501461036b576101c2565b806324d7806c116101a057806324d7806c1461026a578063394c244b146102a75780633b97f5b3146102d05780634dc74d22146102f9576101c2565b80631150f0f3146101c75780631785f53c146102045780631b2094631461022d575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906138f1565b610703565b6040516101fb9190613955565b60405180910390f35b34801561021057600080fd5b5061022b600480360381019061022691906139ce565b610739565b005b34801561023957600080fd5b50610254600480360381019061024f9190613a9c565b61079c565b6040516102619190613ddb565b60405180910390f35b34801561027657600080fd5b50610291600480360381019061028c91906139ce565b610b16565b60405161029e9190613955565b60405180910390f35b3480156102b357600080fd5b506102ce60048036038101906102c99190613a9c565b610b36565b005b3480156102dc57600080fd5b506102f760048036038101906102f29190613e29565b610d1a565b005b34801561030557600080fd5b5061030e610ee6565b60405161031b9190613ea7565b60405180910390f35b61033e60048036038101906103399190613ec2565b610f0c565b005b34801561034c57600080fd5b50610355610f2b565b6040516103629190613f37565b60405180910390f35b34801561037757600080fd5b50610380610f5e565b60405161038d9190613f61565b60405180910390f35b3480156103a257600080fd5b506103bd60048036038101906103b89190613a9c565b610f67565b6040516103d09796959493929190613fd5565b60405180910390f35b3480156103e557600080fd5b506103ee611074565b6040516103fb9190613ea7565b60405180910390f35b34801561041057600080fd5b5061042b600480360381019061042691906139ce565b61109a565b6040516104389190613f61565b60405180910390f35b34801561044d57600080fd5b50610468600480360381019061046391906139ce565b6110b2565b005b34801561047657600080fd5b5061047f611115565b005b34801561048d57600080fd5b50610496611129565b6040516104a39190613ea7565b60405180910390f35b3480156104b857600080fd5b506104d360048036038101906104ce9190614113565b611161565b005b3480156104e157600080fd5b506104fc60048036038101906104f79190613a9c565b611471565b6040516105099190613f61565b60405180910390f35b34801561051e57600080fd5b50610539600480360381019061053491906141d8565b61149f565b6040516105469190613f61565b60405180910390f35b34801561055b57600080fd5b50610564611690565b6040516105719190614234565b60405180910390f35b34801561058657600080fd5b5061058f6116c9565b60405161059c91906142b5565b60405180910390f35b3480156105b157600080fd5b506105cc60048036038101906105c791906142d0565b6116ed565b005b3480156105da57600080fd5b506105f560048036038101906105f091906139ce565b611902565b005b34801561060357600080fd5b5061061e600480360381019061061991906139ce565b61194d565b60405161062b9190613f61565b60405180910390f35b34801561064057600080fd5b5061065b60048036038101906106569190614348565b611965565b005b34801561066957600080fd5b50610684600480360381019061067f91906143a4565b611bdf565b005b34801561069257600080fd5b506106ad60048036038101906106a891906139ce565b611f37565b005b3480156106bb57600080fd5b506106c4611fbd565b6040516106d1919061447e565b60405180910390f35b3480156106e657600080fd5b5061070160048036038101906106fc9190614499565b611fe3565b005b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6107416122d8565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6107a4613663565b60006005836040516107b6919061453c565b9081526020016040518091039020604051806101000160405290816000820180546107e090614582565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90614582565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156108e757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161089d575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16600381111561099357610992613c3b565b5b60038111156109a5576109a4613c3b565b5b81525050905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b209463856040518263ffffffff1660e01b8152600401610a079190614234565b600060405180830381865afa158015610a24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a4d9190614723565b905060405180610140016040528085815260200183602001518152602001836040015173ffffffffffffffffffffffffffffffffffffffff16815260200183606001518152602001600986604051610aa5919061453c565b9081526020016040518091039020548152602001836080015181526020018360a0015181526020018360c0015181526020018360e001516003811115610aee57610aed613c3b565b5b815260200182604001516002811115610b0a57610b09613c3b565b5b81525092505050919050565b60046020528060005260406000206000915054906101000a900460ff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb9906147de565b60405180910390fd5b60016003811115610bd657610bd5613c3b565b5b600582604051610be6919061453c565b908152602001604051809103902060070160009054906101000a900460ff166003811115610c1757610c16613c3b565b5b14610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e9061484a565b60405180910390fd5b6002600582604051610c69919061453c565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115610c9c57610c9b613c3b565b5b02179055506000600582604051610cb3919061453c565b9081526020016040518091039020600301541115610cd557610cd48161235f565b5b80604051610ce3919061453c565b60405180910390207f2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf87588060405160405180910390a250565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d906147de565b60405180910390fd5b60016003811115610dba57610db9613c3b565b5b600584604051610dca919061453c565b908152602001604051809103902060070160009054906101000a900460ff166003811115610dfb57610dfa613c3b565b5b03610ee15781600584604051610e11919061453c565b90815260200160405180910390206006016000828254610e319190614899565b9250508190555080600584604051610e49919061453c565b90815260200160405180910390206003016000828254610e699190614899565b9250508190555082604051610e7e919061453c565b60405180910390207fd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c83600586604051610eb8919061453c565b908152602001604051809103902060060154604051610ed89291906148cd565b60405180910390a25b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f146127fa565b610f1d826128e0565b610f2782826128eb565b5050565b6000610f35612a0a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006002905090565b600581805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610fa090614582565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcc90614582565b80156110195780601f10610fee57610100808354040283529160200191611019565b820191906000526020600020905b815481529060010190602001808311610ffc57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905087565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915090505481565b6110ba6122d8565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61111d6122d8565b6111276000612a91565b565b600080611134612b68565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e4906147de565b60405180910390fd5b6000600381111561120157611200613c3b565b5b600587604051611211919061453c565b908152602001604051809103902060070160009054906101000a900460ff16600381111561124257611241613c3b565b5b14611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990614942565b60405180910390fd5b6040518061010001604052808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200161271061251c866112c79190614962565b6112d191906149d3565b815260200142815260200160008152602001828152602001600160038111156112fd576112fc613c3b565b5b815250600587604051611310919061453c565b908152602001604051809103902060008201518160000190816113339190614ba6565b5060208201518160010190805190602001906113509291906136f0565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360038111156113eb576113ea613c3b565b5b021790555090505081600987604051611404919061453c565b90815260200160405180910390208190555085604051611424919061453c565b60405180910390207f1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951868686856040516114619493929190614ce7565b60405180910390a2505050505050565b6009818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000806005846040516114b2919061453c565b908152602001604051809103902090506000805b826001018054905081101561155a578473ffffffffffffffffffffffffffffffffffffffff1683600101828154811061150257611501614d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361154d57600191505b80806001019150506114c6565b508061156b5760009250505061168a565b6002600381111561157f5761157e613c3b565b5b8260070160009054906101000a900460ff1660038111156115a3576115a2613c3b565b5b036115c857816001018054905082600301546115bf91906149d3565b9250505061168a565b6003808111156115db576115da613c3b565b5b8260070160009054906101000a900460ff1660038111156115ff576115fe613c3b565b5b036116835760008260040154836005015461161a9190614d62565b905082600601548110611648578260010180549050836003015461163e91906149d3565b935050505061168a565b826001018054905083600601548285600301546116659190614962565b61166f91906149d3565b61167991906149d3565b935050505061168a565b6000925050505b92915050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611779576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611770906147de565b60405180910390fd5b6001600381111561178d5761178c613c3b565b5b60058360405161179d919061453c565b908152602001604051809103902060070160009054906101000a900460ff1660038111156117ce576117cd613c3b565b5b1461180e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118059061484a565b60405180910390fd5b6002600583604051611820919061453c565b908152602001604051809103902060070160006101000a81548160ff0219169083600381111561185357611852613c3b565b5b021790555081604051611866919061453c565b60405180910390207f2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf87588060405160405180910390a260006005836040516118ac919061453c565b908152602001604051809103902090506000816003015411156118fd5760008160010180549050835183600301546118e49190614962565b6118ee91906149d3565b90506118fb848483612b90565b505b505050565b61190a6122d8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528060005260406000206000915090505481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e8906147de565b60405180910390fd5b60016003811115611a0557611a04613c3b565b5b600583604051611a15919061453c565b908152602001604051809103902060070160009054906101000a900460ff166003811115611a4657611a45613c3b565b5b14611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d9061484a565b60405180910390fd5b600582604051611a96919061453c565b908152602001604051809103902060040154811015611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190614e08565b60405180910390fd5b6003600583604051611afc919061453c565b908152602001604051809103902060070160006101000a81548160ff02191690836003811115611b2f57611b2e613c3b565b5b021790555080600583604051611b45919061453c565b9081526020016040518091039020600501819055506000600583604051611b6c919061453c565b9081526020016040518091039020600301541115611b8e57611b8d8261235f565b5b81604051611b9c919061453c565b60405180910390207f58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a3682604051611bd39190613f61565b60405180910390a25050565b600781604051611bef9190614e6f565b908152602001604051809103902060009054906101000a900460ff1615611c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4290614ed2565b60405180910390fd5b60046000611c906040518060400160405280600b81526020017f636c61696d526566756e64000000000000000000000000000000000000000000815250868686612d9d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0e90614f3e565b60405180910390fd5b6000600584604051611d29919061453c565b908152602001604051809103902090503373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc290614faa565b60405180910390fd5b6001600783604051611ddd9190614e6f565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600081600101805490508260030154611e1b91906149d3565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401611e9e93929190614fca565b6020604051808303816000875af1158015611ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee1919061502d565b503373ffffffffffffffffffffffffffffffffffffffff167f358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae982604051611f289190613f61565b60405180910390a25050505050565b611f3f6122d8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611fb15760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611fa89190613ea7565b60405180910390fd5b611fba81612a91565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611fed612df9565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561203b5750825b9050600060018367ffffffffffffffff16148015612070575060003073ffffffffffffffffffffffffffffffffffffffff163b145b90508115801561207e575080155b156120b5576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156121055760018560000160086101000a81548160ff0219169083151502179055505b61210e33612e21565b612116612e35565b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083156122cd5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516122c491906150a9565b60405180910390a15b505050505050505050565b6122e0612e3f565b73ffffffffffffffffffffffffffffffffffffffff166122fe611129565b73ffffffffffffffffffffffffffffffffffffffff161461235d57612321612e3f565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016123549190613ea7565b60405180910390fd5b565b6000600582604051612371919061453c565b908152602001604051809103902090506002600381111561239557612394613c3b565b5b8160070160009054906101000a900460ff1660038111156123b9576123b8613c3b565b5b0361245a57612455828260010180548060200260200160405190810160405280929190818152602001828054801561244657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116123fc575b50505050508360030154612b90565b6127f6565b60038081111561246d5761246c613c3b565b5b8160070160009054906101000a900460ff16600381111561249157612490613c3b565b5b036127ba576000816004015482600501546124ac9190614d62565b90508160060154811061255c5781600601549050612557838360010180548060200260200160405190810160405280929190818152602001828054801561254857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116124fe575b50505050508460030154612b90565b6127b4565b600082600601548284600301546125739190614962565b61257d91906149d3565b9050612612848460010180548060200260200160405190810160405280929190818152602001828054801561260757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116125bd575b505050505083612b90565b600061271061138883866003015461262a9190614d62565b6126349190614962565b61263e91906149d3565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b81526004016126e593929190614fca565b6020604051808303816000875af1158015612704573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612728919061502d565b508360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1685604051612772919061453c565b60405180910390207fcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8836040516127a99190613f61565b60405180910390a350505b506127f5565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ec90615136565b60405180910390fd5b5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614806128a757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661288e612e47565b73ffffffffffffffffffffffffffffffffffffffff1614155b156128de576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6128e86122d8565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561295357506040513d601f19601f820116820180604052508101906129509190615182565b60015b61299457816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161298b9190613ea7565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146129fb57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016129f29190613f37565b60405180910390fd5b612a058383612e9e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612a8f576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612a9b612b68565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b612b9981612f11565b6000825182612ba891906149d3565b905060005b8351811015612d96576000848281518110612bcb57612bca614d33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663565a2e2c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4191906151af565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683866040518463ffffffff1660e01b8152600401612cc493929190614fca565b6020604051808303816000875af1158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061502d565b50848281518110612d1b57612d1a614d33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1686604051612d47919061453c565b60405180910390207f6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d28386604051612d809291906151dc565b60405180910390a3508080600101915050612bad565b5050505050565b600080858585604051602001612db593929190615205565b6040516020818303038152906040528051906020012090506000612dd882612ffb565b9050612ded848261303190919063ffffffff16565b92505050949350505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612e2961305d565b612e328161309d565b50565b612e3d61305d565b565b600033905090565b6000612e757f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613123565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612ea78261312d565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115612f0457612efe82826131fa565b50612f0d565b612f0c61327e565b5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401612fb493929190614fca565b6020604051808303816000875af1158015612fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff7919061502d565b5050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b60008060008061304186866132bb565b9250925092506130518282613317565b82935050505092915050565b61306561347b565b61309b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6130a561305d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036131175760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161310e9190613ea7565b60405180910390fd5b61312081612a91565b50565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b0361318957806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016131809190613ea7565b60405180910390fd5b806131b67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613123565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516132249190614e6f565b600060405180830381855af49150503d806000811461325f576040519150601f19603f3d011682016040523d82523d6000602084013e613264565b606091505b509150915061327485838361349b565b9250505092915050565b60003411156132b9576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600080600060418451036133005760008060006020870151925060408701519150606087015160001a90506132f28882858561352a565b955095509550505050613310565b60006002855160001b9250925092505b9250925092565b6000600381111561332b5761332a613c3b565b5b82600381111561333e5761333d613c3b565b5b0315613477576001600381111561335857613357613c3b565b5b82600381111561336b5761336a613c3b565b5b036133a2576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156133b6576133b5613c3b565b5b8260038111156133c9576133c8613c3b565b5b0361340e578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016134059190613f61565b60405180910390fd5b60038081111561342157613420613c3b565b5b82600381111561343457613433613c3b565b5b0361347657806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161346d9190613f37565b60405180910390fd5b5b5050565b6000613485612df9565b60000160089054906101000a900460ff16905090565b6060826134b0576134ab8261361e565b613522565b600082511480156134d8575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561351a57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016135119190613ea7565b60405180910390fd5b819050613523565b5b9392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561356a576000600385925092509250613614565b60006001888888886040516000815260200160405260405161358f9493929190615252565b6020604051602081039080840390855afa1580156135b1573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361360557600060016000801b93509350935050613614565b8060008060001b935093509350505b9450945094915050565b6000815111156136315780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518061014001604052806060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600060038111156136d1576136d0613c3b565b5b8152602001600060028111156136ea576136e9613c3b565b5b81525090565b828054828255906000526020600020908101928215613769579160200282015b828111156137685782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613710565b5b509050613776919061377a565b5090565b5b8082111561379357600081600090555060010161377b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137fe826137b5565b810181811067ffffffffffffffff8211171561381d5761381c6137c6565b5b80604052505050565b6000613830613797565b905061383c82826137f5565b919050565b600067ffffffffffffffff82111561385c5761385b6137c6565b5b613865826137b5565b9050602081019050919050565b82818337600083830152505050565b600061389461388f84613841565b613826565b9050828152602081018484840111156138b0576138af6137b0565b5b6138bb848285613872565b509392505050565b600082601f8301126138d8576138d76137ab565b5b81356138e8848260208601613881565b91505092915050565b600060208284031215613907576139066137a1565b5b600082013567ffffffffffffffff811115613925576139246137a6565b5b613931848285016138c3565b91505092915050565b60008115159050919050565b61394f8161393a565b82525050565b600060208201905061396a6000830184613946565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061399b82613970565b9050919050565b6139ab81613990565b81146139b657600080fd5b50565b6000813590506139c8816139a2565b92915050565b6000602082840312156139e4576139e36137a1565b5b60006139f2848285016139b9565b91505092915050565b600067ffffffffffffffff821115613a1657613a156137c6565b5b613a1f826137b5565b9050602081019050919050565b6000613a3f613a3a846139fb565b613826565b905082815260208101848484011115613a5b57613a5a6137b0565b5b613a66848285613872565b509392505050565b600082601f830112613a8357613a826137ab565b5b8135613a93848260208601613a2c565b91505092915050565b600060208284031215613ab257613ab16137a1565b5b600082013567ffffffffffffffff811115613ad057613acf6137a6565b5b613adc84828501613a6e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b1f578082015181840152602081019050613b04565b60008484015250505050565b6000613b3682613ae5565b613b408185613af0565b9350613b50818560208601613b01565b613b59816137b5565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b9981613990565b82525050565b6000613bab8383613b90565b60208301905092915050565b6000602082019050919050565b6000613bcf82613b64565b613bd98185613b6f565b9350613be483613b80565b8060005b83811015613c15578151613bfc8882613b9f565b9750613c0783613bb7565b925050600181019050613be8565b5085935050505092915050565b6000819050919050565b613c3581613c22565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613c7b57613c7a613c3b565b5b50565b6000819050613c8c82613c6a565b919050565b6000613c9c82613c7e565b9050919050565b613cac81613c91565b82525050565b60038110613cc357613cc2613c3b565b5b50565b6000819050613cd482613cb2565b919050565b6000613ce482613cc6565b9050919050565b613cf481613cd9565b82525050565b6000610140830160008301518482036000860152613d188282613b2b565b91505060208301518482036020860152613d328282613bc4565b9150506040830151613d476040860182613b90565b506060830151613d5a6060860182613c2c565b506080830151613d6d6080860182613c2c565b5060a0830151613d8060a0860182613c2c565b5060c0830151613d9360c0860182613c2c565b5060e0830151613da660e0860182613c2c565b50610100830151613dbb610100860182613ca3565b50610120830151613dd0610120860182613ceb565b508091505092915050565b60006020820190508181036000830152613df58184613cfa565b905092915050565b613e0681613c22565b8114613e1157600080fd5b50565b600081359050613e2381613dfd565b92915050565b600080600060608486031215613e4257613e416137a1565b5b600084013567ffffffffffffffff811115613e6057613e5f6137a6565b5b613e6c86828701613a6e565b9350506020613e7d86828701613e14565b9250506040613e8e86828701613e14565b9150509250925092565b613ea181613990565b82525050565b6000602082019050613ebc6000830184613e98565b92915050565b60008060408385031215613ed957613ed86137a1565b5b6000613ee7858286016139b9565b925050602083013567ffffffffffffffff811115613f0857613f076137a6565b5b613f14858286016138c3565b9150509250929050565b6000819050919050565b613f3181613f1e565b82525050565b6000602082019050613f4c6000830184613f28565b92915050565b613f5b81613c22565b82525050565b6000602082019050613f766000830184613f52565b92915050565b600082825260208201905092915050565b6000613f9882613ae5565b613fa28185613f7c565b9350613fb2818560208601613b01565b613fbb816137b5565b840191505092915050565b613fcf81613c91565b82525050565b600060e0820190508181036000830152613fef818a613f8d565b9050613ffe6020830189613e98565b61400b6040830188613f52565b6140186060830187613f52565b6140256080830186613f52565b61403260a0830185613f52565b61403f60c0830184613fc6565b98975050505050505050565b600067ffffffffffffffff821115614066576140656137c6565b5b602082029050602081019050919050565b600080fd5b600061408f61408a8461404b565b613826565b905080838252602082019050602084028301858111156140b2576140b1614077565b5b835b818110156140db57806140c788826139b9565b8452602084019350506020810190506140b4565b5050509392505050565b600082601f8301126140fa576140f96137ab565b5b813561410a84826020860161407c565b91505092915050565b60008060008060008060c087890312156141305761412f6137a1565b5b600087013567ffffffffffffffff81111561414e5761414d6137a6565b5b61415a89828a01613a6e565b965050602087013567ffffffffffffffff81111561417b5761417a6137a6565b5b61418789828a016140e5565b955050604061419889828a016139b9565b94505060606141a989828a01613e14565b93505060806141ba89828a01613e14565b92505060a06141cb89828a01613e14565b9150509295509295509295565b600080604083850312156141ef576141ee6137a1565b5b600083013567ffffffffffffffff81111561420d5761420c6137a6565b5b61421985828601613a6e565b925050602061422a858286016139b9565b9150509250929050565b6000602082019050818103600083015261424e8184613f8d565b905092915050565b6000819050919050565b600061427b61427661427184613970565b614256565b613970565b9050919050565b600061428d82614260565b9050919050565b600061429f82614282565b9050919050565b6142af81614294565b82525050565b60006020820190506142ca60008301846142a6565b92915050565b600080604083850312156142e7576142e66137a1565b5b600083013567ffffffffffffffff811115614305576143046137a6565b5b61431185828601613a6e565b925050602083013567ffffffffffffffff811115614332576143316137a6565b5b61433e858286016140e5565b9150509250929050565b6000806040838503121561435f5761435e6137a1565b5b600083013567ffffffffffffffff81111561437d5761437c6137a6565b5b61438985828601613a6e565b925050602061439a85828601613e14565b9150509250929050565b6000806000606084860312156143bd576143bc6137a1565b5b600084013567ffffffffffffffff8111156143db576143da6137a6565b5b6143e786828701613a6e565b935050602084013567ffffffffffffffff811115614408576144076137a6565b5b61441486828701613a6e565b925050604084013567ffffffffffffffff811115614435576144346137a6565b5b614441868287016138c3565b9150509250925092565b600061445682614260565b9050919050565b60006144688261444b565b9050919050565b6144788161445d565b82525050565b6000602082019050614493600083018461446f565b92915050565b600080600080608085870312156144b3576144b26137a1565b5b60006144c1878288016139b9565b94505060206144d2878288016139b9565b93505060406144e3878288016139b9565b92505060606144f4878288016139b9565b91505092959194509250565b600081905092915050565b600061451682613ae5565b6145208185614500565b9350614530818560208601613b01565b80840191505092915050565b6000614548828461450b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061459a57607f821691505b6020821081036145ad576145ac614553565b5b50919050565b600080fd5b600080fd5b6000815190506145cc816139a2565b92915050565b60006145e56145e08461404b565b613826565b9050808382526020820190506020840283018581111561460857614607614077565b5b835b81811015614631578061461d88826145bd565b84526020840193505060208101905061460a565b5050509392505050565b600082601f8301126146505761464f6137ab565b5b81516146608482602086016145d2565b91505092915050565b60008151905061467881613dfd565b92915050565b6003811061468b57600080fd5b50565b60008151905061469d8161467e565b92915050565b6000606082840312156146b9576146b86145b3565b5b6146c36060613826565b9050600082015167ffffffffffffffff8111156146e3576146e26145b8565b5b6146ef8482850161463b565b600083015250602061470384828501614669565b60208301525060406147178482850161468e565b60408301525092915050565b600060208284031215614739576147386137a1565b5b600082015167ffffffffffffffff811115614757576147566137a6565b5b614763848285016146a3565b91505092915050565b7f4f6e6c79207468652061646d696e2063616e2063616c6c20746869732066756e60008201527f6374696f6e2e0000000000000000000000000000000000000000000000000000602082015250565b60006147c8602683613f7c565b91506147d38261476c565b604082019050919050565b600060208201905081810360008301526147f7816147bb565b9050919050565b7f7461736b206973206e6f7420696e2070726f6772657373000000000000000000600082015250565b6000614834601783613f7c565b915061483f826147fe565b602082019050919050565b6000602082019050818103600083015261486381614827565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006148a482613c22565b91506148af83613c22565b92508282019050808211156148c7576148c661486a565b5b92915050565b60006040820190506148e26000830185613f52565b6148ef6020830184613f52565b9392505050565b7f7461736b55696420616c72656164792061737369676e65640000000000000000600082015250565b600061492c601883613f7c565b9150614937826148f6565b602082019050919050565b6000602082019050818103600083015261495b8161491f565b9050919050565b600061496d82613c22565b915061497883613c22565b925082820261498681613c22565b9150828204841483151761499d5761499c61486a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006149de82613c22565b91506149e983613c22565b9250826149f9576149f86149a4565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614a667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614a29565b614a708683614a29565b95508019841693508086168417925050509392505050565b6000614aa3614a9e614a9984613c22565b614256565b613c22565b9050919050565b6000819050919050565b614abd83614a88565b614ad1614ac982614aaa565b848454614a36565b825550505050565b600090565b614ae6614ad9565b614af1818484614ab4565b505050565b5b81811015614b1557614b0a600082614ade565b600181019050614af7565b5050565b601f821115614b5a57614b2b81614a04565b614b3484614a19565b81016020851015614b43578190505b614b57614b4f85614a19565b830182614af6565b50505b505050565b600082821c905092915050565b6000614b7d60001984600802614b5f565b1980831691505092915050565b6000614b968383614b6c565b9150826002028217905092915050565b614baf82613ae5565b67ffffffffffffffff811115614bc857614bc76137c6565b5b614bd28254614582565b614bdd828285614b19565b600060209050601f831160018114614c105760008415614bfe578287015190505b614c088582614b8a565b865550614c70565b601f198416614c1e86614a04565b60005b82811015614c4657848901518255600182019150602085019450602081019050614c21565b86831015614c635784890151614c5f601f891682614b6c565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000614c9482613b64565b614c9e8185614c78565b9350614ca983613b80565b8060005b83811015614cda578151614cc18882613b9f565b9750614ccc83613bb7565b925050600181019050614cad565b5085935050505092915050565b60006080820190508181036000830152614d018187614c89565b9050614d106020830186613e98565b614d1d6040830185613f52565b614d2a6060830184613f52565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614d6d82613c22565b9150614d7883613c22565b9250828203905081811115614d9057614d8f61486a565b5b92915050565b7f7465726d696e6174652074696d65206d7573742062652061667465722073746160008201527f72742074696d6500000000000000000000000000000000000000000000000000602082015250565b6000614df2602783613f7c565b9150614dfd82614d96565b604082019050919050565b60006020820190508181036000830152614e2181614de5565b9050919050565b600081519050919050565b600081905092915050565b6000614e4982614e28565b614e538185614e33565b9350614e63818560208601613b01565b80840191505092915050565b6000614e7b8284614e3e565b915081905092915050565b7f7369676e617475726520616c7265616479207573656400000000000000000000600082015250565b6000614ebc601683613f7c565b9150614ec782614e86565b602082019050919050565b60006020820190508181036000830152614eeb81614eaf565b9050919050565b7f7369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b6000614f28601d83613f7c565b9150614f3382614ef2565b602082019050919050565b60006020820190508181036000830152614f5781614f1b565b9050919050565b7f73656e646572206973206e6f7420746865207573657200000000000000000000600082015250565b6000614f94601683613f7c565b9150614f9f82614f5e565b602082019050919050565b60006020820190508181036000830152614fc381614f87565b9050919050565b6000606082019050614fdf6000830186613e98565b614fec6020830185613e98565b614ff96040830184613f52565b949350505050565b61500a8161393a565b811461501557600080fd5b50565b60008151905061502781615001565b92915050565b600060208284031215615043576150426137a1565b5b600061505184828501615018565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061509361508e6150898461505a565b614256565b615064565b9050919050565b6150a381615078565b82525050565b60006020820190506150be600083018461509a565b92915050565b7f7461736b206973206e6f7420636f6d706c65746564206e6f72207465726d696e60008201527f6174656400000000000000000000000000000000000000000000000000000000602082015250565b6000615120602483613f7c565b915061512b826150c4565b604082019050919050565b6000602082019050818103600083015261514f81615113565b9050919050565b61515f81613f1e565b811461516a57600080fd5b50565b60008151905061517c81615156565b92915050565b600060208284031215615198576151976137a1565b5b60006151a68482850161516d565b91505092915050565b6000602082840312156151c5576151c46137a1565b5b60006151d3848285016145bd565b91505092915050565b60006040820190506151f16000830185613e98565b6151fe6020830184613f52565b9392505050565b6000615211828661450b565b915061521d828561450b565b9150615229828461450b565b9150819050949350505050565b600060ff82169050919050565b61524c81615236565b82525050565b60006080820190506152676000830187613f28565b6152746020830186615243565b6152816040830185613f28565b61528e6060830184613f28565b9594505050505056fea2646970667358221220f46377c343544a34209b7157474a03b7a382531a50fd9292e77c3f82a377097064736f6c63430008190033",
}

// FcpTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use FcpTaskManagerMetaData.ABI instead.
var FcpTaskManagerABI = FcpTaskManagerMetaData.ABI

// FcpTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FcpTaskManagerMetaData.Bin instead.
var FcpTaskManagerBin = FcpTaskManagerMetaData.Bin

// DeployFcpTaskManager deploys a new Ethereum contract, binding an instance of FcpTaskManager to it.
func DeployFcpTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FcpTaskManager, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FcpTaskManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// FcpTaskManager is an auto generated Go binding around an Ethereum contract.
type FcpTaskManager struct {
	FcpTaskManagerCaller     // Read-only binding to the contract
	FcpTaskManagerTransactor // Write-only binding to the contract
	FcpTaskManagerFilterer   // Log filterer for contract events
}

// FcpTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FcpTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FcpTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FcpTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FcpTaskManagerSession struct {
	Contract     *FcpTaskManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FcpTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FcpTaskManagerCallerSession struct {
	Contract *FcpTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// FcpTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FcpTaskManagerTransactorSession struct {
	Contract     *FcpTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// FcpTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FcpTaskManagerRaw struct {
	Contract *FcpTaskManager // Generic contract binding to access the raw methods on
}

// FcpTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FcpTaskManagerCallerRaw struct {
	Contract *FcpTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// FcpTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FcpTaskManagerTransactorRaw struct {
	Contract *FcpTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFcpTaskManager creates a new instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManager(address common.Address, backend bind.ContractBackend) (*FcpTaskManager, error) {
	contract, err := bindFcpTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManager{FcpTaskManagerCaller: FcpTaskManagerCaller{contract: contract}, FcpTaskManagerTransactor: FcpTaskManagerTransactor{contract: contract}, FcpTaskManagerFilterer: FcpTaskManagerFilterer{contract: contract}}, nil
}

// NewFcpTaskManagerCaller creates a new read-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*FcpTaskManagerCaller, error) {
	contract, err := bindFcpTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerCaller{contract: contract}, nil
}

// NewFcpTaskManagerTransactor creates a new write-only instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*FcpTaskManagerTransactor, error) {
	contract, err := bindFcpTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTransactor{contract: contract}, nil
}

// NewFcpTaskManagerFilterer creates a new log filterer instance of FcpTaskManager, bound to a specific deployed contract.
func NewFcpTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*FcpTaskManagerFilterer, error) {
	contract, err := bindFcpTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerFilterer{contract: contract}, nil
}

// bindFcpTaskManager binds a generic wrapper to an already deployed contract.
func bindFcpTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FcpTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.FcpTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.FcpTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FcpTaskManager *FcpTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FcpTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FcpTaskManager *FcpTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FcpTaskManager.Contract.UPGRADEINTERFACEVERSION(&_FcpTaskManager.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FcpTaskManager *FcpTaskManagerCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FcpTaskManager.Contract.UPGRADEINTERFACEVERSION(&_FcpTaskManager.CallOpts)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ApWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "apWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ApWallet is a free data retrieval call binding the contract method 0x4dc74d22.
//
// Solidity: function apWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ApWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ApWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) ArWallet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "arWallet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// ArWallet is a free data retrieval call binding the contract method 0x69ab84f2.
//
// Solidity: function arWallet() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ArWallet() (common.Address, error) {
	return _FcpTaskManager.Contract.ArWallet(&_FcpTaskManager.CallOpts)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) ClaimableRefund(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "claimableRefund", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableRefund(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableRefund is a free data retrieval call binding the contract method 0x6e1e063f.
//
// Solidity: function claimableRefund(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ClaimableRefund(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableRefund(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) ClaimableReward(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "claimableReward", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) ClaimableReward(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableReward(&_FcpTaskManager.CallOpts, arg0)
}

// ClaimableReward is a free data retrieval call binding the contract method 0xe9503425.
//
// Solidity: function claimableReward(address ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ClaimableReward(arg0 common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.ClaimableReward(&_FcpTaskManager.CallOpts, arg0)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) CollateralContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "collateralContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// CollateralContract is a free data retrieval call binding the contract method 0xc6e1c7c9.
//
// Solidity: function collateralContract() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) CollateralContract() (common.Address, error) {
	return _FcpTaskManager.Contract.CollateralContract(&_FcpTaskManager.CallOpts)
}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) CollateralValue(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "collateralValue", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) CollateralValue(arg0 string) (*big.Int, error) {
	return _FcpTaskManager.Contract.CollateralValue(&_FcpTaskManager.CallOpts, arg0)
}

// CollateralValue is a free data retrieval call binding the contract method 0xa718a952.
//
// Solidity: function collateralValue(string ) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) CollateralValue(arg0 string) (*big.Int, error) {
	return _FcpTaskManager.Contract.CollateralValue(&_FcpTaskManager.CallOpts, arg0)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCaller) GetTaskInfo(opts *bind.CallOpts, taskUid string) (TaskManagerFullTaskInfo, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "getTaskInfo", taskUid)

	if err != nil {
		return *new(TaskManagerFullTaskInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TaskManagerFullTaskInfo)).(*TaskManagerFullTaskInfo)

	return out0, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x1b209463.
//
// Solidity: function getTaskInfo(string taskUid) view returns((string,address[],address,uint256,uint256,uint256,uint256,uint256,uint8,uint8))
func (_FcpTaskManager *FcpTaskManagerCallerSession) GetTaskInfo(taskUid string) (TaskManagerFullTaskInfo, error) {
	return _FcpTaskManager.Contract.GetTaskInfo(&_FcpTaskManager.CallOpts, taskUid)
}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) GetTaskReward(opts *bind.CallOpts, taskUid string, cpAccount common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "getTaskReward", taskUid, cpAccount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) GetTaskReward(taskUid string, cpAccount common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.GetTaskReward(&_FcpTaskManager.CallOpts, taskUid, cpAccount)
}

// GetTaskReward is a free data retrieval call binding the contract method 0xa9478988.
//
// Solidity: function getTaskReward(string taskUid, address cpAccount) view returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) GetTaskReward(taskUid string, cpAccount common.Address) (*big.Int, error) {
	return _FcpTaskManager.Contract.GetTaskReward(&_FcpTaskManager.CallOpts, taskUid, cpAccount)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCaller) IsAdmin(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "isAdmin", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCallerSession) IsAdmin(arg0 common.Address) (bool, error) {
	return _FcpTaskManager.Contract.IsAdmin(&_FcpTaskManager.CallOpts, arg0)
}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCaller) IsSignatureUsed(opts *bind.CallOpts, arg0 []byte) (bool, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "isSignatureUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerSession) IsSignatureUsed(arg0 []byte) (bool, error) {
	return _FcpTaskManager.Contract.IsSignatureUsed(&_FcpTaskManager.CallOpts, arg0)
}

// IsSignatureUsed is a free data retrieval call binding the contract method 0x1150f0f3.
//
// Solidity: function isSignatureUsed(bytes ) view returns(bool)
func (_FcpTaskManager *FcpTaskManagerCallerSession) IsSignatureUsed(arg0 []byte) (bool, error) {
	return _FcpTaskManager.Contract.IsSignatureUsed(&_FcpTaskManager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Owner() (common.Address, error) {
	return _FcpTaskManager.Contract.Owner(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FcpTaskManager *FcpTaskManagerCallerSession) ProxiableUUID() ([32]byte, error) {
	return _FcpTaskManager.Contract.ProxiableUUID(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCaller) RewardToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "rewardToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// RewardToken is a free data retrieval call binding the contract method 0xf7c618c1.
//
// Solidity: function rewardToken() view returns(address)
func (_FcpTaskManager *FcpTaskManagerCallerSession) RewardToken() (common.Address, error) {
	return _FcpTaskManager.Contract.RewardToken(&_FcpTaskManager.CallOpts)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCaller) Tasks(opts *bind.CallOpts, arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "tasks", arg0)

	outstruct := new(struct {
		TaskUid            string
		User               common.Address
		Reward             *big.Int
		StartTimestamp     *big.Int
		TerminateTimestamp *big.Int
		Duration           *big.Int
		TaskStatus         uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TaskUid = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.User = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Reward = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.StartTimestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.TerminateTimestamp = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.TaskStatus = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Tasks is a free data retrieval call binding the contract method 0x58709cf2.
//
// Solidity: function tasks(string ) view returns(string taskUid, address user, uint256 reward, uint256 startTimestamp, uint256 terminateTimestamp, uint256 duration, uint8 taskStatus)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Tasks(arg0 string) (struct {
	TaskUid            string
	User               common.Address
	Reward             *big.Int
	StartTimestamp     *big.Int
	TerminateTimestamp *big.Int
	Duration           *big.Int
	TaskStatus         uint8
}, error) {
	return _FcpTaskManager.Contract.Tasks(&_FcpTaskManager.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FcpTaskManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(uint256)
func (_FcpTaskManager *FcpTaskManagerCallerSession) Version() (*big.Int, error) {
	return _FcpTaskManager.Contract.Version(&_FcpTaskManager.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AddAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "addAdmin", newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address newAdmin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AddAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AddAdmin(&_FcpTaskManager.TransactOpts, newAdmin)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) AssignTask(opts *bind.TransactOpts, taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "assignTask", taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// AssignTask is a paid mutator transaction binding the contract method 0x9a8afe9c.
//
// Solidity: function assignTask(string taskUid, address[] cpAccountList, address user, uint256 reward, uint256 collateral, uint256 duration) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) AssignTask(taskUid string, cpAccountList []common.Address, user common.Address, reward *big.Int, collateral *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.AssignTask(&_FcpTaskManager.TransactOpts, taskUid, cpAccountList, user, reward, collateral, duration)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ClaimRefund(opts *bind.TransactOpts, taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "claimRefund", taskUid, jobUid, signature)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ClaimRefund(taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ClaimRefund(&_FcpTaskManager.TransactOpts, taskUid, jobUid, signature)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xeef74fc7.
//
// Solidity: function claimRefund(string taskUid, string jobUid, bytes signature) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ClaimRefund(taskUid string, jobUid string, signature []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ClaimRefund(&_FcpTaskManager.TransactOpts, taskUid, jobUid, signature)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) CompleteTask(opts *bind.TransactOpts, taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "completeTask", taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// CompleteTask is a paid mutator transaction binding the contract method 0x394c244b.
//
// Solidity: function completeTask(string taskUid) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) CompleteTask(taskUid string) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask(&_FcpTaskManager.TransactOpts, taskUid)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) CompleteTask0(opts *bind.TransactOpts, taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "completeTask0", taskUid, remainingCpList)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerSession) CompleteTask0(taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask0(&_FcpTaskManager.TransactOpts, taskUid, remainingCpList)
}

// CompleteTask0 is a paid mutator transaction binding the contract method 0xd038d1ea.
//
// Solidity: function completeTask(string taskUid, address[] remainingCpList) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) CompleteTask0(taskUid string, remainingCpList []common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.CompleteTask0(&_FcpTaskManager.TransactOpts, taskUid, remainingCpList)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) ExtendTask(opts *bind.TransactOpts, taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "extendTask", taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// ExtendTask is a paid mutator transaction binding the contract method 0x3b97f5b3.
//
// Solidity: function extendTask(string taskUid, uint256 extraDuration, uint256 extraReward) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) ExtendTask(taskUid string, extraDuration *big.Int, extraReward *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.ExtendTask(&_FcpTaskManager.TransactOpts, taskUid, extraDuration, extraReward)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) Initialize(opts *bind.TransactOpts, ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "initialize", ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address ar, address ap, address collateralContractAddress, address rewardTokenAddress) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) Initialize(ar common.Address, ap common.Address, collateralContractAddress common.Address, rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.Initialize(&_FcpTaskManager.TransactOpts, ar, ap, collateralContractAddress, rewardTokenAddress)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RemoveAdmin(opts *bind.TransactOpts, admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "removeAdmin", admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RemoveAdmin is a paid mutator transaction binding the contract method 0x1785f53c.
//
// Solidity: function removeAdmin(address admin) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RemoveAdmin(admin common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RemoveAdmin(&_FcpTaskManager.TransactOpts, admin)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FcpTaskManager.Contract.RenounceOwnership(&_FcpTaskManager.TransactOpts)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) SetCollateralContract(opts *bind.TransactOpts, newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "setCollateralContract", newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// SetCollateralContract is a paid mutator transaction binding the contract method 0xe941cd06.
//
// Solidity: function setCollateralContract(address newCollateralContract) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) SetCollateralContract(newCollateralContract common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.SetCollateralContract(&_FcpTaskManager.TransactOpts, newCollateralContract)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TerminateTask(opts *bind.TransactOpts, taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "terminateTask", taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TerminateTask is a paid mutator transaction binding the contract method 0xed7bb9d1.
//
// Solidity: function terminateTask(string taskUid, uint256 terminateTime) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TerminateTask(taskUid string, terminateTime *big.Int) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TerminateTask(&_FcpTaskManager.TransactOpts, taskUid, terminateTime)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.TransferOwnership(&_FcpTaskManager.TransactOpts, newOwner)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FcpTaskManager *FcpTaskManagerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FcpTaskManager.Contract.UpgradeToAndCall(&_FcpTaskManager.TransactOpts, newImplementation, data)
}

// FcpTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FcpTaskManager contract.
type FcpTaskManagerInitializedIterator struct {
	Event *FcpTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerInitialized represents a Initialized event raised by the FcpTaskManager contract.
type FcpTaskManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*FcpTaskManagerInitializedIterator, error) {

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerInitializedIterator{contract: _FcpTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerInitialized)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseInitialized(log types.Log) (*FcpTaskManagerInitialized, error) {
	event := new(FcpTaskManagerInitialized)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferredIterator struct {
	Event *FcpTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the FcpTaskManager contract.
type FcpTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FcpTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerOwnershipTransferredIterator{contract: _FcpTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerOwnershipTransferred)
				if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*FcpTaskManagerOwnershipTransferred, error) {
	event := new(FcpTaskManagerOwnershipTransferred)
	if err := _FcpTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRefundClaimedIterator is returned from FilterRefundClaimed and is used to iterate over the raw logs and unpacked data for RefundClaimed events raised by the FcpTaskManager contract.
type FcpTaskManagerRefundClaimedIterator struct {
	Event *FcpTaskManagerRefundClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRefundClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRefundClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRefundClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRefundClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRefundClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRefundClaimed represents a RefundClaimed event raised by the FcpTaskManager contract.
type FcpTaskManagerRefundClaimed struct {
	User         common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundClaimed is a free log retrieval operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRefundClaimed(opts *bind.FilterOpts, user []common.Address) (*FcpTaskManagerRefundClaimedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RefundClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRefundClaimedIterator{contract: _FcpTaskManager.contract, event: "RefundClaimed", logs: logs, sub: sub}, nil
}

// WatchRefundClaimed is a free log subscription operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRefundClaimed(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRefundClaimed, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RefundClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRefundClaimed)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundClaimed is a log parse operation binding the contract event 0x358fe4192934d3bf28ae181feda1f4bd08ca67f5e2fad55582cce5eb67304ae9.
//
// Solidity: event RefundClaimed(address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRefundClaimed(log types.Log) (*FcpTaskManagerRefundClaimed, error) {
	event := new(FcpTaskManagerRefundClaimed)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRefundReleasedIterator is returned from FilterRefundReleased and is used to iterate over the raw logs and unpacked data for RefundReleased events raised by the FcpTaskManager contract.
type FcpTaskManagerRefundReleasedIterator struct {
	Event *FcpTaskManagerRefundReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRefundReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRefundReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRefundReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRefundReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRefundReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRefundReleased represents a RefundReleased event raised by the FcpTaskManager contract.
type FcpTaskManagerRefundReleased struct {
	TaskUid      common.Hash
	User         common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundReleased is a free log retrieval operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRefundReleased(opts *bind.FilterOpts, taskUid []string, user []common.Address) (*FcpTaskManagerRefundReleasedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RefundReleased", taskUidRule, userRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRefundReleasedIterator{contract: _FcpTaskManager.contract, event: "RefundReleased", logs: logs, sub: sub}, nil
}

// WatchRefundReleased is a free log subscription operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRefundReleased(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRefundReleased, taskUid []string, user []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RefundReleased", taskUidRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRefundReleased)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RefundReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundReleased is a log parse operation binding the contract event 0xcfec56a786650756161aeb9096e9d671f5ff808d8920dc29e0c0cba3dfc2fbf8.
//
// Solidity: event RefundReleased(string indexed taskUid, address indexed user, uint256 refundAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRefundReleased(log types.Log) (*FcpTaskManagerRefundReleased, error) {
	event := new(FcpTaskManagerRefundReleased)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RefundReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardClaimedIterator is returned from FilterRewardClaimed and is used to iterate over the raw logs and unpacked data for RewardClaimed events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardClaimedIterator struct {
	Event *FcpTaskManagerRewardClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardClaimed represents a RewardClaimed event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardClaimed struct {
	CpAccount    common.Address
	Owner        common.Address
	RewardAmount *big.Int
	Payday       uint64
	Signature    []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardClaimed is a free log retrieval operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardClaimed(opts *bind.FilterOpts, cpAccount []common.Address) (*FcpTaskManagerRewardClaimedIterator, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardClaimed", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardClaimedIterator{contract: _FcpTaskManager.contract, event: "RewardClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardClaimed is a free log subscription operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardClaimed(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardClaimed, cpAccount []common.Address) (event.Subscription, error) {

	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardClaimed", cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardClaimed)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardClaimed is a log parse operation binding the contract event 0xfa6e3650fbb9cb93f0c97f7ed33a03523852aba3d6984c217fec7d86f94feda9.
//
// Solidity: event RewardClaimed(address indexed cpAccount, address owner, uint256 rewardAmount, uint64 payday, bytes signature)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardClaimed(log types.Log) (*FcpTaskManagerRewardClaimed, error) {
	event := new(FcpTaskManagerRewardClaimed)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardReadyToClaimIterator is returned from FilterRewardReadyToClaim and is used to iterate over the raw logs and unpacked data for RewardReadyToClaim events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReadyToClaimIterator struct {
	Event *FcpTaskManagerRewardReadyToClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardReadyToClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardReadyToClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardReadyToClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardReadyToClaim represents a RewardReadyToClaim event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReadyToClaim struct {
	TaskUid      common.Hash
	CpAccount    common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardReadyToClaim is a free log retrieval operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardReadyToClaim(opts *bind.FilterOpts, taskUid []string, cpAccount []common.Address) (*FcpTaskManagerRewardReadyToClaimIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardReadyToClaim", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardReadyToClaimIterator{contract: _FcpTaskManager.contract, event: "RewardReadyToClaim", logs: logs, sub: sub}, nil
}

// WatchRewardReadyToClaim is a free log subscription operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardReadyToClaim(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardReadyToClaim, taskUid []string, cpAccount []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardReadyToClaim", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardReadyToClaim)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReadyToClaim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReadyToClaim is a log parse operation binding the contract event 0xc6e13e9d3f986d21bea2ed9ba1704f00c0d92a5df49f8a4638dc9443929a150c.
//
// Solidity: event RewardReadyToClaim(string indexed taskUid, address indexed cpAccount, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardReadyToClaim(log types.Log) (*FcpTaskManagerRewardReadyToClaim, error) {
	event := new(FcpTaskManagerRewardReadyToClaim)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReadyToClaim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerRewardReleasedIterator is returned from FilterRewardReleased and is used to iterate over the raw logs and unpacked data for RewardReleased events raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleasedIterator struct {
	Event *FcpTaskManagerRewardReleased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerRewardReleasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerRewardReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerRewardReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerRewardReleasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerRewardReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerRewardReleased represents a RewardReleased event raised by the FcpTaskManager contract.
type FcpTaskManagerRewardReleased struct {
	TaskUid      common.Hash
	CpAccount    common.Address
	Beneficiary  common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRewardReleased is a free log retrieval operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterRewardReleased(opts *bind.FilterOpts, taskUid []string, cpAccount []common.Address) (*FcpTaskManagerRewardReleasedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerRewardReleasedIterator{contract: _FcpTaskManager.contract, event: "RewardReleased", logs: logs, sub: sub}, nil
}

// WatchRewardReleased is a free log subscription operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchRewardReleased(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerRewardReleased, taskUid []string, cpAccount []common.Address) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}
	var cpAccountRule []interface{}
	for _, cpAccountItem := range cpAccount {
		cpAccountRule = append(cpAccountRule, cpAccountItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "RewardReleased", taskUidRule, cpAccountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerRewardReleased)
				if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardReleased is a log parse operation binding the contract event 0x6504a330caacb9bebf5a13c7a7356d83a2ff093b07185671301738c1761475d2.
//
// Solidity: event RewardReleased(string indexed taskUid, address indexed cpAccount, address beneficiary, uint256 rewardAmount)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseRewardReleased(log types.Log) (*FcpTaskManagerRewardReleased, error) {
	event := new(FcpTaskManagerRewardReleased)
	if err := _FcpTaskManager.contract.UnpackLog(event, "RewardReleased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCompletedIterator is returned from FilterTaskCompleted and is used to iterate over the raw logs and unpacked data for TaskCompleted events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompletedIterator struct {
	Event *FcpTaskManagerTaskCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCompleted represents a TaskCompleted event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCompleted struct {
	TaskUid common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTaskCompleted is a free log retrieval operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCompleted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCompletedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCompletedIterator{contract: _FcpTaskManager.contract, event: "TaskCompleted", logs: logs, sub: sub}, nil
}

// WatchTaskCompleted is a free log subscription operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCompleted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCompleted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCompleted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCompleted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCompleted is a log parse operation binding the contract event 0x2ea2764b7d80d0107c1d2c0210ead4a6fdee0f86235483a041d9faffbf875880.
//
// Solidity: event TaskCompleted(string indexed taskUid)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCompleted(log types.Log) (*FcpTaskManagerTaskCompleted, error) {
	event := new(FcpTaskManagerTaskCompleted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskCreatedIterator is returned from FilterTaskCreated and is used to iterate over the raw logs and unpacked data for TaskCreated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreatedIterator struct {
	Event *FcpTaskManagerTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskCreated represents a TaskCreated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskCreated struct {
	TaskUid  common.Hash
	CpList   []common.Address
	User     common.Address
	Reward   *big.Int
	Duration *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskCreated is a free log retrieval operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskCreated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskCreatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskCreatedIterator{contract: _FcpTaskManager.contract, event: "TaskCreated", logs: logs, sub: sub}, nil
}

// WatchTaskCreated is a free log subscription operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskCreated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskCreated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskCreated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCreated is a log parse operation binding the contract event 0x1455e6e35b1b89916dd3024a995f41593b0b27f0e7cb61b253a69ba2c2d37951.
//
// Solidity: event TaskCreated(string indexed taskUid, address[] cpList, address user, uint256 reward, uint256 duration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskCreated(log types.Log) (*FcpTaskManagerTaskCreated, error) {
	event := new(FcpTaskManagerTaskCreated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskExtendedIterator is returned from FilterTaskExtended and is used to iterate over the raw logs and unpacked data for TaskExtended events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtendedIterator struct {
	Event *FcpTaskManagerTaskExtended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskExtendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskExtended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskExtended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskExtendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskExtendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskExtended represents a TaskExtended event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskExtended struct {
	TaskUid       common.Hash
	AddedDuration *big.Int
	TotalDuration *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTaskExtended is a free log retrieval operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskExtended(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskExtendedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskExtendedIterator{contract: _FcpTaskManager.contract, event: "TaskExtended", logs: logs, sub: sub}, nil
}

// WatchTaskExtended is a free log subscription operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskExtended(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskExtended, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskExtended", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskExtended)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskExtended is a log parse operation binding the contract event 0xd1fa78153d824892404081883d06a6a4d9dd70c117aff5a8bf61c8961ffc941c.
//
// Solidity: event TaskExtended(string indexed taskUid, uint256 addedDuration, uint256 totalDuration)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskExtended(log types.Log) (*FcpTaskManagerTaskExtended, error) {
	event := new(FcpTaskManagerTaskExtended)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskExtended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerTaskTerminatedIterator is returned from FilterTaskTerminated and is used to iterate over the raw logs and unpacked data for TaskTerminated events raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminatedIterator struct {
	Event *FcpTaskManagerTaskTerminated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerTaskTerminatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerTaskTerminated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerTaskTerminated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerTaskTerminatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerTaskTerminatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerTaskTerminated represents a TaskTerminated event raised by the FcpTaskManager contract.
type FcpTaskManagerTaskTerminated struct {
	TaskUid            common.Hash
	TerminateTimestamp *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterTaskTerminated is a free log retrieval operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterTaskTerminated(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerTaskTerminatedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerTaskTerminatedIterator{contract: _FcpTaskManager.contract, event: "TaskTerminated", logs: logs, sub: sub}, nil
}

// WatchTaskTerminated is a free log subscription operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchTaskTerminated(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerTaskTerminated, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "TaskTerminated", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerTaskTerminated)
				if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskTerminated is a log parse operation binding the contract event 0x58136d68c79c10fb55282098b850a5a1c041b28af29cb65ea657a824f5bd6a36.
//
// Solidity: event TaskTerminated(string indexed taskUid, uint256 terminateTimestamp)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseTaskTerminated(log types.Log) (*FcpTaskManagerTaskTerminated, error) {
	event := new(FcpTaskManagerTaskTerminated)
	if err := _FcpTaskManager.contract.UnpackLog(event, "TaskTerminated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerURISubmittedIterator is returned from FilterURISubmitted and is used to iterate over the raw logs and unpacked data for URISubmitted events raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmittedIterator struct {
	Event *FcpTaskManagerURISubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerURISubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerURISubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerURISubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerURISubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerURISubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerURISubmitted represents a URISubmitted event raised by the FcpTaskManager contract.
type FcpTaskManagerURISubmitted struct {
	TaskUid   common.Hash
	Submitter common.Address
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterURISubmitted is a free log retrieval operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterURISubmitted(opts *bind.FilterOpts, taskUid []string) (*FcpTaskManagerURISubmittedIterator, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerURISubmittedIterator{contract: _FcpTaskManager.contract, event: "URISubmitted", logs: logs, sub: sub}, nil
}

// WatchURISubmitted is a free log subscription operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchURISubmitted(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerURISubmitted, taskUid []string) (event.Subscription, error) {

	var taskUidRule []interface{}
	for _, taskUidItem := range taskUid {
		taskUidRule = append(taskUidRule, taskUidItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "URISubmitted", taskUidRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerURISubmitted)
				if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURISubmitted is a log parse operation binding the contract event 0x2b9a4b6cdefbc34e0fe2cf2e7c540e2382e53f5a2d4e7dfc6f26dc1c3ed3fe66.
//
// Solidity: event URISubmitted(string indexed taskUid, address submitter, string uri)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseURISubmitted(log types.Log) (*FcpTaskManagerURISubmitted, error) {
	event := new(FcpTaskManagerURISubmitted)
	if err := _FcpTaskManager.contract.UnpackLog(event, "URISubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FcpTaskManagerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the FcpTaskManager contract.
type FcpTaskManagerUpgradedIterator struct {
	Event *FcpTaskManagerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FcpTaskManagerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FcpTaskManagerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FcpTaskManagerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FcpTaskManagerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FcpTaskManagerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FcpTaskManagerUpgraded represents a Upgraded event raised by the FcpTaskManager contract.
type FcpTaskManagerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*FcpTaskManagerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &FcpTaskManagerUpgradedIterator{contract: _FcpTaskManager.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *FcpTaskManagerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FcpTaskManager.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FcpTaskManagerUpgraded)
				if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FcpTaskManager *FcpTaskManagerFilterer) ParseUpgraded(log types.Log) (*FcpTaskManagerUpgraded, error) {
	event := new(FcpTaskManagerUpgraded)
	if err := _FcpTaskManager.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
